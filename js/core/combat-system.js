class CombatSystem {
    constructor(player, enemy) {
        this.player = player;
        this.enemy = enemy;
        this.currentTurn = 'player';
        this.currentPhase = 'aiming'; // 'aiming', 'charging', 'flying'
        this.aimAngle = 45;
        this.power = 0;
        this.chargeInterval = null;
        this.POWER_INCREMENT = 2;
        this.projectiles = [];
        this.platforms = [];
        
        this.battleField = document.querySelector('.battle-field');
        this.battleControls = document.getElementById('battle-controls');
        this.battleLog = document.getElementById('battle-log');
        this.returnBtn = document.getElementById('return-to-arena-btn');
        
        this.initBattle();
    }
    
    initBattle() {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∏–º–µ–Ω
        document.getElementById('player-image').style.backgroundImage = `url('${this.player.image}')`;
        document.getElementById('player-name').textContent = this.player.username;
        document.getElementById('enemy-image').style.backgroundImage = `url('${this.enemy.image}')`;
        document.getElementById('enemy-name').textContent = this.enemy.name;

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        this.updateHealthBars();

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        this.player.selectedAbilities.forEach(ability => {
            const btn = document.createElement('button');
            btn.className = 'ability-btn';
            btn.innerHTML = `${ability.icon} ${ability.name}`;
            btn.dataset.type = ability.type;
            btn.addEventListener('click', () => this.performAction(ability.type));
            this.battleControls.appendChild(btn);
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        this.createPlatforms();
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
        this.createAimInterface();
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –±–æ—è
        this.addLogEntry(`‚öîÔ∏è –ë–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è: ${this.player.username} –ø—Ä–æ—Ç–∏–≤ ${this.enemy.name}!`, 'battle-start');
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ö–æ–¥–∞
        this.updateTurnIndicator();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.addEventListener('keydown', (e) => this.handleKeyDown(e));
        document.addEventListener('keyup', (e) => this.handleKeyUp(e));
        this.returnBtn.addEventListener('click', () => {
            window.location.href = '../html/arena.html';
        });
    }
    
    createPlatforms() {
        const platformsContainer = document.createElement('div');
        platformsContainer.className = 'ground-platforms';
        
        // –°–æ–∑–¥–∞–µ–º 3-5 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        const platformCount = 3 + Math.floor(Math.random() * 3);
        const platformWidths = [150, 200, 250];
        
        for (let i = 0; i < platformCount; i++) {
            const platform = document.createElement('div');
            platform.className = 'platform';
            
            const width = platformWidths[Math.floor(Math.random() * platformWidths.length)];
            const height = 20 + Math.floor(Math.random() * 30);
            
            const maxLeft = this.battleField.offsetWidth - width;
            const left = Math.max(0, Math.floor(Math.random() * maxLeft));
            const bottom = 50 + Math.floor(Math.random() * 150);
            
            platform.style.width = `${width}px`;
            platform.style.height = `${height}px`;
            platform.style.left = `${left}px`;
            platform.style.bottom = `${bottom}px`;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π
            this.platforms.push({
                element: platform,
                x: left,
                y: bottom,
                width: width,
                height: height
            });
            
            platformsContainer.appendChild(platform);
        }
        
        this.battleField.appendChild(platformsContainer);
    }
    
    createAimInterface() {
        const aimIndicator = document.createElement('div');
        aimIndicator.id = 'aim-indicator';
        document.querySelector('.player-combatant').appendChild(aimIndicator);
        
        const powerBar = document.createElement('div');
        powerBar.id = 'power-bar';
        powerBar.innerHTML = `
            <div class="power-container">
                <div class="power-level"></div>
            </div>
        `;
        document.querySelector('.player-combatant').appendChild(powerBar);
        
        const helpText = document.createElement('div');
        helpText.id = 'aim-help';
        helpText.innerHTML = `
            <p>‚Üë/‚Üì: –ò–∑–º–µ–Ω–∏—Ç—å —É–≥–æ–ª</p>
            <p>–ü—Ä–æ–±–µ–ª: –ó–∞—Ä—è–¥–∏—Ç—å –∏ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å</p>
        `;
        this.battleField.appendChild(helpText);
        
        this.startAimingPhase();
    }
    
    startAimingPhase() {
        this.currentPhase = 'aiming';
        this.aimAngle = 45;
        this.power = 0;
        
        document.getElementById('aim-indicator').style.display = 'block';
        document.getElementById('power-bar').style.display = 'none';
        document.getElementById('aim-help').style.display = 'block';
        
        this.updateAimIndicator();
    }
    
    startChargingPhase() {
        this.currentPhase = 'charging';
        this.power = 0;
        
        document.getElementById('aim-indicator').style.display = 'none';
        document.getElementById('power-bar').style.display = 'block';
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞—Ä—è–¥–∞ —Å–∏–ª—ã
        this.chargeInterval = setInterval(() => {
            this.power = Math.min(100, this.power + this.POWER_INCREMENT);
            document.querySelector('.power-level').style.width = `${this.power}%`;
            
            if (this.power >= 100) {
                clearInterval(this.chargeInterval);
                this.fireProjectile();
            }
        }, 50);
    }
    
    fireProjectile() {
        clearInterval(this.chargeInterval);
        this.currentPhase = 'flying';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
        document.getElementById('power-bar').style.display = 'none';
        document.getElementById('aim-help').style.display = 'none';
        
        // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã
        const damage = this.calculateDamage(this.player.stats.strength, this.power/100, 0.2);
        
        // –°–æ–∑–¥–∞–µ–º —Å–Ω–∞—Ä—è–¥
        this.createProjectile('player', 'enemy', damage, 'standard');
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        this.addLogEntry(`üéØ ${this.player.username} —Å—Ç—Ä–µ–ª—è–µ—Ç (${this.aimAngle}¬∞, ${this.power}%)`);
    }
    
    updateAimIndicator() {
        const indicator = document.getElementById('aim-indicator');
        indicator.style.transform = `rotate(${-this.aimAngle}deg)`;
    }
    
    handleKeyDown(e) {
        if (this.currentTurn !== 'player') return;
        
        switch(e.key) {
            case 'ArrowUp':
                if (this.currentPhase === 'aiming') {
                    this.aimAngle = Math.min(85, this.aimAngle + 5);
                    this.updateAimIndicator();
                }
                break;
            case 'ArrowDown':
                if (this.currentPhase === 'aiming') {
                    this.aimAngle = Math.max(5, this.aimAngle - 5);
                    this.updateAimIndicator();
                }
                break;
            case ' ':
                if (this.currentPhase === 'aiming') {
                    this.startChargingPhase();
                }
                break;
        }
    }
    
    handleKeyUp(e) {
        if (e.key === ' ' && this.currentPhase === 'charging') {
            clearInterval(this.chargeInterval);
            this.fireProjectile();
        }
    }
    
    createProjectile(from, to, damage, type) {
        const fromElement = document.querySelector(`.${from}-combatant .character-image`);
        const toElement = document.querySelector(`.${to}-combatant .character-image`);
        
        const projectile = document.createElement('div');
        projectile.className = `projectile ${type}`;
        
        const fromRect = fromElement.getBoundingClientRect();
        const toRect = toElement.getBoundingClientRect();
        
        const startX = fromRect.left + fromRect.width/2;
        const startY = fromRect.top + fromRect.height/2;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å —É—á–µ—Ç–æ–º —É–≥–ª–∞ –∏ —Å–∏–ª—ã
        const angleRad = this.aimAngle * Math.PI / 180;
        const distance = 300 * (this.power / 100); // –ú–∞–∫—Å –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
        
        const endX = startX + Math.cos(angleRad) * distance;
        const endY = startY - Math.sin(angleRad) * distance;
        
        projectile.style.left = `${startX}px`;
        projectile.style.top = `${startY}px`;
        
        document.body.appendChild(projectile);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª–µ—Ç–∞ —Å–Ω–∞—Ä—è–¥–∞
        projectile.style.setProperty('--end-x', `${endX - startX}px`);
        projectile.style.setProperty('--end-y', `${endY - startY}px`);
        
        projectile.classList.add('flying');
        
        setTimeout(() => {
            projectile.remove();
            
            // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è
            const hitEffect = document.createElement('div');
            hitEffect.className = 'hit-effect';
            hitEffect.style.left = `${endX}px`;
            hitEffect.style.top = `${endY}px`;
            document.body.appendChild(hitEffect);
            
            setTimeout(() => hitEffect.remove(), 500);
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
            if (to === 'enemy') {
                this.enemy.health -= damage;
                
                if (this.enemy.health <= 0) {
                    this.enemy.health = 0;
                    this.updateHealthBars();
                    setTimeout(() => this.endBattle(true), 1000);
                    return;
                }
            } else {
                this.player.stats.health -= damage;
                
                if (this.player.stats.health <= 0) {
                    this.player.stats.health = 0;
                    this.updateHealthBars();
                    setTimeout(() => this.endBattle(false), 1000);
                    return;
                }
            }
            
            this.updateHealthBars();
            
            if (to === 'enemy') {
                setTimeout(() => this.enemyTurn(), 1000);
            }
        }, 1000);
    }
    
    performAction(action) {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        document.querySelectorAll('.ability-btn').forEach(btn => btn.disabled = true);
        
        let playerDamage = 0;
        let enemyDamage = 0;
        let message = '';
        
        const playerImg = document.getElementById('player-image');
        playerImg.classList.add('attacking');

        switch(action) {
            case 'attack':
                playerDamage = this.calculateDamage(this.player.stats.strength, 0.8, 0.4);
                message = `üí• ${this.player.username} —Å—Ç—Ä–µ–ª—è–µ—Ç (${playerDamage} —É—Ä–æ–Ω–∞)`;
                this.createProjectile('player', 'enemy', playerDamage, 'standard');
                break;
                
            case 'critical':
                playerDamage = this.calculateDamage(this.player.stats.strength, 1.5, 0.8);
                message = `üî• ${this.player.username} –Ω–∞–Ω–æ—Å–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä (${playerDamage} —É—Ä–æ–Ω–∞)!`;
                this.createProjectile('player', 'enemy', playerDamage, 'critical');
                break;
                
            case 'defense':
                playerDamage = this.calculateDamage(this.player.stats.strength, 0.3, 0.2);
                enemyDamage = this.calculateDamage(this.enemy.attack, 0.3, 0.2);
                message = `üõ°Ô∏è ${this.player.username} –∑–∞—â–∏—â–∞–µ—Ç—Å—è –∏ –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É–µ—Ç (${playerDamage} —É—Ä–æ–Ω–∞)`;
                this.createProjectile('player', 'enemy', playerDamage, 'defensive');
                break;
                
            case 'heal':
                const healAmount = Math.floor(this.player.stats.strength * 0.5);
                this.player.stats.health = Math.min(100, this.player.stats.health + healAmount);
                this.addLogEntry(`‚ù§Ô∏è ${this.player.username} –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ${healAmount} –∑–¥–æ—Ä–æ–≤—å—è!`, 'heal');
                this.updateHealthBars();
                
                // –≠—Ñ—Ñ–µ–∫—Ç –ª–µ—á–µ–Ω–∏—è
                const healEffect = document.createElement('div');
                healEffect.className = 'heal-effect';
                document.querySelector('.player-combatant').appendChild(healEffect);
                setTimeout(() => healEffect.remove(), 1000);
                
                setTimeout(() => this.enemyTurn(), 1500);
                return;
        }

        this.addLogEntry(message);
        setTimeout(() => {
            playerImg.classList.remove('attacking');
            if (action !== 'heal') {
                setTimeout(() => this.enemyTurn(), 1000);
            }
        }, 500);
    }
    
    enemyTurn() {
        document.querySelectorAll('.ability-btn').forEach(btn => btn.disabled = true);
        
        const enemyImg = document.getElementById('enemy-image');
        enemyImg.classList.add('attacking');
        
        setTimeout(() => {
            const damage = this.calculateDamage(this.enemy.attack, 0.7, 0.6);
            this.addLogEntry(`üí£ ${this.enemy.name} –∞—Ç–∞–∫—É–µ—Ç (${damage} —É—Ä–æ–Ω–∞)`);
            
            this.createProjectile('enemy', 'player', damage, 'enemy');
            
            setTimeout(() => {
                enemyImg.classList.remove('attacking');
                document.querySelectorAll('.ability-btn').forEach(btn => btn.disabled = false);
                this.startAimingPhase();
            }, 500);
        }, 1000);
    }
    
    calculateDamage(base, multiplier, variance) {
        return Math.floor(base * (multiplier + Math.random() * variance));
    }
    
    updateHealthBars() {
        const playerHealthPercent = (this.player.stats.health / 100) * 100;
        const enemyHealthPercent = (this.enemy.health / this.enemy.maxHealth) * 100;
        
        document.getElementById('player-health').style.width = `${playerHealthPercent}%`;
        document.getElementById('enemy-health').style.width = `${enemyHealthPercent}%`;
        
        document.getElementById('player-health-text').textContent = `${this.player.stats.health}/100`;
        document.getElementById('enemy-health-text').textContent = `${this.enemy.health}/${this.enemy.maxHealth}`;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
        if (playerHealthPercent < 30) {
            document.getElementById('player-health').classList.add('critical');
        } else {
            document.getElementById('player-health').classList.remove('critical');
        }
        
        if (enemyHealthPercent < 30) {
            document.getElementById('enemy-health').classList.add('critical');
        } else {
            document.getElementById('enemy-health').classList.remove('critical');
        }
    }
    
    endBattle(victory) {
        this.battleControls.style.display = 'none';
        this.returnBtn.style.display = 'block';
        
        if (victory) {
            const expGain = Math.floor(this.enemy.level * 10);
            this.player.stats.experience += expGain;
            
            // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–±–µ–¥—ã
            const victoryEffect = document.createElement('div');
            victoryEffect.className = 'victory-effect';
            document.querySelector('.player-combatant').appendChild(victoryEffect);
            
            this.addLogEntry(`üéâ –ü–û–ë–ï–î–ê! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${expGain} –æ–ø—ã—Ç–∞!`, 'victory');
        } else {
            // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏—è
            const defeatEffect = document.createElement('div');
            defeatEffect.className = 'defeat-effect';
            document.querySelector('.player-combatant').appendChild(defeatEffect);
            
            this.addLogEntry('‚ò†Ô∏è –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –í—ã —á—É–¥–æ–º –≤—ã–∂–∏–ª–∏...', 'defeat');
        }
        
        GameStorage.savePlayer(this.player);
    }
    
    addLogEntry(message, type = '') {
        const entry = document.createElement('div');
        entry.className = `log-entry ${type}`;
        entry.innerHTML = message;
        this.battleLog.appendChild(entry);
        this.battleLog.scrollTop = this.battleLog.scrollHeight;
    }
    
    updateTurnIndicator() {
        const indicator = document.getElementById('turn-indicator');
        if (this.currentTurn === 'player') {
            indicator.textContent = `–í–∞—à —Ö–æ–¥ (${this.player.username})`;
            indicator.style.color = '#4CAF50';
        } else {
            indicator.textContent = `–•–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (${this.enemy.name})`;
            indicator.style.color = '#F44336';
        }
    }
}